{
	"paths": {
		"/db": {
			"get": {
				"tags": [
					"db"
				],
				"summary": "getDbResources() - Get resources for this service.",
				"operationId": "getDbResources",
				"description": "Return an array of the resources available.",
				"parameters": [
					{
						"name": "as_list",
						"type": "boolean",
						"in": "query",
						"description": "Return only a list of the resource identifiers."
					},
					{
						"name": "as_access_list",
						"type": "boolean",
						"in": "query",
						"description": "Returns a list of the resources for role access designation."
					},
					{
						"name": "include_access",
						"type": "boolean",
						"in": "query",
						"description": "Include the access permissions for the returned resource."
					},
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "refresh",
						"type": "boolean",
						"in": "query",
						"description": "Refresh any cached resource list on the server."
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SqliteDbsResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/db/_schema": {
			"get": {
				"tags": [
					"db"
				],
				"summary": "getDbSchemas() - List all Schemas",
				"operationId": "getDbSchemas",
				"description": "Return a list of the resource identifiers.",
				"parameters": [
					{
						"name": "as_list",
						"type": "boolean",
						"in": "query",
						"description": "Return only a list of the resource identifiers."
					},
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "ids",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "integer",
							"format": "int32"
						},
						"in": "query",
						"description": "Comma-delimited list of the identifiers of the records to retrieve."
					},
					{
						"name": "refresh",
						"type": "boolean",
						"in": "query",
						"description": "Refresh any cached resource list on the server."
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SchemasResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"db"
				],
				"summary": "createDbTables() - Create one or more tables.",
				"operationId": "createDbTables",
				"parameters": [
					{
						"name": "tables",
						"description": "Array of table definitions.",
						"schema": {
							"$ref": "#/definitions/TableSchemas"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Tables Created",
						"schema": {
							"$ref": "#/definitions/SchemasResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be a single table definition or an array of table definitions."
			},
			"put": {
				"tags": [
					"db"
				],
				"summary": "replaceDbTables() - Update (replace) one or more tables.",
				"operationId": "replaceDbTables",
				"parameters": [
					{
						"name": "tables",
						"description": "Array of table definitions.",
						"schema": {
							"$ref": "#/definitions/TableSchemas"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Tables Updated",
						"schema": {
							"$ref": "#/definitions/SchemasResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be a single table definition or an array of table definitions."
			},
			"patch": {
				"tags": [
					"db"
				],
				"summary": "updateDbTables() - Update (patch) one or more tables.",
				"operationId": "updateDbTables",
				"parameters": [
					{
						"name": "tables",
						"description": "Array of table definitions.",
						"schema": {
							"$ref": "#/definitions/TableSchemas"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Tables Updated",
						"schema": {
							"$ref": "#/definitions/SchemasResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be a single table definition or an array of table definitions."
			}
		},
		"/db/_schema/{table_name}": {
			"parameters": [
				{
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				}
			],
			"get": {
				"tags": [
					"db"
				],
				"summary": "describeDbTable() - Retrieve table definition for the given table.",
				"operationId": "describeDbTable",
				"parameters": [
					{
						"name": "refresh",
						"description": "Refresh any cached copy of the schema.",
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Table Schema",
						"schema": {
							"$ref": "#/definitions/TableSchema"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "This describes the table, its fields and relations to other tables."
			},
			"post": {
				"tags": [
					"db"
				],
				"summary": "createDbTable() - Create a table with the given properties and fields.",
				"operationId": "createDbTable",
				"parameters": [
					{
						"name": "schema",
						"description": "Array of table properties and fields definitions.",
						"schema": {
							"$ref": "#/definitions/TableSchema"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of field properties."
			},
			"put": {
				"tags": [
					"db"
				],
				"summary": "replaceDbTable() - Update (replace) a table with the given properties.",
				"operationId": "replaceDbTable",
				"parameters": [
					{
						"name": "schema",
						"description": "Array of field definitions.",
						"schema": {
							"$ref": "#/definitions/TableSchema"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of field properties."
			},
			"patch": {
				"tags": [
					"db"
				],
				"summary": "updateDbTable() - Update (patch) a table with the given properties.",
				"operationId": "updateDbTable",
				"parameters": [
					{
						"name": "schema",
						"description": "Array of field definitions.",
						"schema": {
							"$ref": "#/definitions/TableSchema"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of field properties."
			},
			"delete": {
				"tags": [
					"db"
				],
				"summary": "deleteDbTable() - Delete (aka drop) the given table.",
				"operationId": "deleteDbTable",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Careful, this drops the database table and all of its contents."
			}
		},
		"/db/_schema/{table_name}/_field": {
			"parameters": [
				{
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				}
			],
			"get": {
				"tags": [
					"db"
				],
				"summary": "describeDbFields() - Retrieve table field definitions for the given table.",
				"operationId": "describeDbFields",
				"parameters": [
					{
						"name": "refresh",
						"description": "Refresh any cached copy of the schema.",
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Table Fields Schema",
						"schema": {
							"$ref": "#/definitions/FieldSchemas"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "This describes the table's fields."
			},
			"post": {
				"tags": [
					"db"
				],
				"summary": "createDbFields() - Create table fields.",
				"operationId": "createDbFields",
				"parameters": [
					{
						"name": "schema",
						"description": "Array of table properties and fields definitions.",
						"schema": {
							"$ref": "#/definitions/FieldSchemas"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of fields and their properties."
			},
			"put": {
				"tags": [
					"db"
				],
				"summary": "replaceDbFields() - Update (replace) table fields with the given properties.",
				"operationId": "replaceDbFields",
				"parameters": [
					{
						"name": "schema",
						"description": "Array of field definitions.",
						"schema": {
							"$ref": "#/definitions/FieldSchemas"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of fields and their properties."
			},
			"patch": {
				"tags": [
					"db"
				],
				"summary": "updateDbFields() - Update (patch) table fields with the given properties.",
				"operationId": "updateDbFields",
				"parameters": [
					{
						"name": "schema",
						"description": "Array of field definitions.",
						"schema": {
							"$ref": "#/definitions/FieldSchemas"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of field properties."
			},
			"delete": {
				"tags": [
					"db"
				],
				"summary": "deleteDbFields() - Delete (aka drop) the given fields.",
				"operationId": "deleteDbFields",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Careful, this drops the table column and all of its contents."
			}
		},
		"/db/_schema/{table_name}/_related": {
			"parameters": [
				{
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				}
			],
			"get": {
				"tags": [
					"db"
				],
				"summary": "describeDbRelationships() - Retrieve relationships definition for the given table.",
				"operationId": "describeDbRelationships",
				"parameters": [
					{
						"name": "refresh",
						"description": "Refresh any cached copy of the schema.",
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Relationships Schema",
						"schema": {
							"$ref": "#/definitions/RelationshipSchemas"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "This describes the table relationships to other tables."
			},
			"post": {
				"tags": [
					"db"
				],
				"summary": "createDbRelationships() - Create table relationships with the given properties.",
				"operationId": "createDbRelationships",
				"parameters": [
					{
						"name": "schema",
						"description": "Array of relationship definitions.",
						"schema": {
							"$ref": "#/definitions/RelationshipSchemas"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of relationship properties."
			},
			"put": {
				"tags": [
					"db"
				],
				"summary": "replaceDbRelationships() - Update (replace) table relationships with the given properties.",
				"operationId": "replaceDbRelationships",
				"parameters": [
					{
						"name": "schema",
						"description": "Array of field definitions.",
						"schema": {
							"$ref": "#/definitions/RelationshipSchemas"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of relationship properties."
			},
			"patch": {
				"tags": [
					"db"
				],
				"summary": "updateDbRelationships() - Update (patch) a table with the given properties.",
				"operationId": "updateDbRelationships",
				"parameters": [
					{
						"name": "schema",
						"description": "Array of field definitions.",
						"schema": {
							"$ref": "#/definitions/RelationshipSchemas"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of relationship properties."
			},
			"delete": {
				"tags": [
					"db"
				],
				"summary": "deleteDbRelationships() - Delete the given table relationships.",
				"operationId": "deleteDbRelationships",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Removes the relationships between tables."
			}
		},
		"/db/_schema/{table_name}/_field/{field_name}": {
			"parameters": [
				{
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				},
				{
					"name": "field_name",
					"description": "Name of the field to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				}
			],
			"get": {
				"tags": [
					"db"
				],
				"summary": "describeDbField() - Retrieve the definition of the given field for the given table.",
				"operationId": "describeDbField",
				"parameters": [
					{
						"name": "refresh",
						"description": "Refresh any cached copy of the schema.",
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Field Schema",
						"schema": {
							"$ref": "#/definitions/FieldSchema"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "This describes the field and its properties."
			},
			"put": {
				"tags": [
					"db"
				],
				"summary": "replaceDbField() - Update one field by identifier.",
				"operationId": "replaceDbField",
				"parameters": [
					{
						"name": "properties",
						"description": "Array of field properties.",
						"schema": {
							"$ref": "#/definitions/FieldSchema"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of field properties for the given field."
			},
			"patch": {
				"tags": [
					"db"
				],
				"summary": "updateDbField() - Update one field by identifier.",
				"operationId": "updateDbField",
				"parameters": [
					{
						"name": "properties",
						"description": "Array of field properties.",
						"schema": {
							"$ref": "#/definitions/FieldSchema"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of field properties for the given field."
			},
			"delete": {
				"tags": [
					"db"
				],
				"summary": "deleteDbField() - Remove the given field from the given table.",
				"operationId": "deleteDbField",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Careful, this drops the database table field/column and all of its contents."
			}
		},
		"/db/_schema/{table_name}/_related/{relationship_name}": {
			"parameters": [
				{
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				},
				{
					"name": "relationship_name",
					"description": "Name of the relationship to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				}
			],
			"get": {
				"tags": [
					"db"
				],
				"summary": "describeDbRelationship() - Retrieve the definition of the given relationship for the given table.",
				"operationId": "describeDbField",
				"parameters": [
					{
						"name": "refresh",
						"description": "Refresh any cached copy of the schema.",
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Relationship Schema",
						"schema": {
							"$ref": "#/definitions/RelationshipSchema"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "This describes the relationship and its properties."
			},
			"put": {
				"tags": [
					"db"
				],
				"summary": "replaceDbRelationship() - Update one relationship by identifier.",
				"operationId": "replaceDbRelationship",
				"parameters": [
					{
						"name": "properties",
						"description": "Array of relationship properties.",
						"schema": {
							"$ref": "#/definitions/RelationshipSchema"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of properties for the given relationship."
			},
			"patch": {
				"tags": [
					"db"
				],
				"summary": "updateDbRelationship() - Update one relationship by identifier.",
				"operationId": "updateDbRelationship",
				"parameters": [
					{
						"name": "properties",
						"description": "Array of relationship properties.",
						"schema": {
							"$ref": "#/definitions/RelationshipSchema"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of properties for the given relationship."
			},
			"delete": {
				"tags": [
					"db"
				],
				"summary": "deleteDbRelationship() - Remove the given relationship from the given table.",
				"operationId": "deleteDbRelationship",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Removes the relationship between the tables given."
			}
		},
		"/db/_schema/{table_name}/{field_name}": {
			"parameters": [
				{
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				},
				{
					"name": "field_name",
					"description": "Name of the field to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				}
			],
			"get": {
				"tags": [
					"db"
				],
				"summary": "describeDbField() - Retrieve the definition of the given field for the given table. DEPRECATED",
				"operationId": "describeDbField",
				"parameters": [
					{
						"name": "refresh",
						"description": "Refresh any cached copy of the schema.",
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "Field Schema",
						"schema": {
							"$ref": "#/definitions/FieldSchema"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "This describes the field and its properties."
			},
			"put": {
				"tags": [
					"db"
				],
				"summary": "replaceDbField() - Update one field by identifier. DEPRECATED",
				"operationId": "replaceDbField",
				"parameters": [
					{
						"name": "properties",
						"description": "Array of field properties.",
						"schema": {
							"$ref": "#/definitions/FieldSchema"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of field properties for the given field."
			},
			"patch": {
				"tags": [
					"db"
				],
				"summary": "updateDbField() - Update one field by identifier. DEPRECATED",
				"operationId": "updateDbField",
				"parameters": [
					{
						"name": "properties",
						"description": "Array of field properties.",
						"schema": {
							"$ref": "#/definitions/FieldSchema"
						},
						"in": "body",
						"required": true
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Post data should be an array of field properties for the given field."
			},
			"delete": {
				"tags": [
					"db"
				],
				"summary": "deleteDbField() - Remove the given field from the given table. DEPRECATED",
				"operationId": "deleteDbField",
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/Success"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				},
				"description": "Careful, this drops the database table field/column and all of its contents."
			}
		},
		"/db/_table": {
			"get": {
				"tags": [
					"db"
				],
				"summary": "getDbTables() - List all Tables",
				"operationId": "getDbTables",
				"description": "Return a list of the resource identifiers.",
				"parameters": [
					{
						"name": "as_list",
						"type": "boolean",
						"in": "query",
						"description": "Return only a list of the resource identifiers."
					},
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "ids",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "integer",
							"format": "int32"
						},
						"in": "query",
						"description": "Comma-delimited list of the identifiers of the records to retrieve."
					},
					{
						"name": "refresh",
						"type": "boolean",
						"in": "query",
						"description": "Refresh any cached resource list on the server."
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/TablesResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/db/_table/{table_name}": {
			"parameters": [
				{
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				}
			],
			"get": {
				"tags": [
					"db"
				],
				"summary": "getDbRecords() - Retrieve one or more records.",
				"operationId": "getDbRecords",
				"description": "Set the <b>filter</b> parameter to a SQL WHERE clause (optional native filter accepted in some scenarios) to limit records returned or leave it blank to return all records up to the maximum limit.<br/> Set the <b>limit</b> parameter with or without a filter to return a specific amount of records.<br/> Use the <b>offset</b> parameter along with the <b>limit</b> parameter to page through sets of records.<br/> Set the <b>order</b> parameter to SQL ORDER_BY clause containing field and optional direction (<field_name> [ASC|DESC]) to order the returned records.<br/> Alternatively, to send the <b>filter</b> with or without <b>params</b> as posted data, use the getRecordsByPost() POST request and post a filter with or without params.<br/>Pass the identifying field values as a comma-separated list in the <b>ids</b> parameter.<br/> Use the <b>id_field</b> and <b>id_type</b> parameters to override or specify detail for identifying fields where applicable.<br/> Alternatively, to send the <b>ids</b> as posted data, use the getRecordsByPost() POST request.<br/> Use the <b>fields</b> parameter to limit properties returned for each record. By default, all fields are returned for all records. ",
				"consumes": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"produces": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"parameters": [
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "related",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each resource."
					},
					{
						"name": "filter",
						"type": "string",
						"in": "query",
						"description": "SQL-like filter to limit the records to retrieve."
					},
					{
						"name": "limit",
						"type": "integer",
						"format": "int32",
						"in": "query",
						"description": "Set to limit the filter results."
					},
					{
						"name": "offset",
						"type": "integer",
						"format": "int32",
						"in": "query",
						"description": "Set to offset the filter results to a particular record count."
					},
					{
						"name": "order",
						"type": "string",
						"in": "query",
						"description": "SQL-like order containing field and direction for filter results."
					},
					{
						"name": "group",
						"type": "string",
						"in": "query",
						"description": "Comma-delimited list of the fields used for grouping of filter results."
					},
					{
						"name": "count_only",
						"type": "boolean",
						"in": "query",
						"description": "Return only the total number of filter results."
					},
					{
						"name": "include_count",
						"type": "boolean",
						"in": "query",
						"description": "Include the total number of filter results in returned metadata."
					},
					{
						"name": "include_schema",
						"type": "boolean",
						"in": "query",
						"description": "Include the schema of the table queried in returned metadata."
					},
					{
						"name": "ids",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "integer",
							"format": "int32"
						},
						"in": "query",
						"description": "Comma-delimited list of the identifiers of the records to retrieve."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "continue",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "rollback",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "file",
						"type": "string",
						"in": "query",
						"description": "Download the results of the request as a file. <b>This is here for documentation purpose only. File will not download using API Docs.</b> "
					}
				],
				"responses": {
					"200": {
						"description": "Records",
						"schema": {
							"$ref": "#/definitions/RecordsResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"post": {
				"tags": [
					"db"
				],
				"summary": "createDbRecords() - Create one or more records.",
				"operationId": "createDbRecords",
				"description": "Posted data should be an array of records wrapped in a <b>record</b> element.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
				"consumes": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"produces": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"parameters": [
					{
						"name": "body",
						"description": "Data containing name-value pairs of records to create.",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/RecordsRequest"
						},
						"required": true
					},
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "related",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each resource."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "continue",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "rollback",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "X-HTTP-METHOD",
						"description": "Override request using POST to tunnel other http request, such as DELETE or GET passing a payload.",
						"enum": [
							"GET",
							"PUT",
							"PATCH",
							"DELETE"
						],
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "Records",
						"schema": {
							"$ref": "#/definitions/RecordsResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"put": {
				"tags": [
					"db"
				],
				"summary": "replaceDbRecords() - Update (replace) one or more records.",
				"operationId": "replaceDbRecords",
				"description": "Post data should be an array of records wrapped in a <b>resource</b> tag.<br/> If ids or filter is used, posted body should be a single record with name-value pairs to update, wrapped in a <b>resource</b> tag.<br/> Ids can be included via URL parameter or included in the posted body.<br/> Filter can be included via URL parameter or included in the posted body.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
				"consumes": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"produces": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"parameters": [
					{
						"name": "body",
						"description": "Data containing name-value pairs of records to update.",
						"schema": {
							"$ref": "#/definitions/RecordsRequest"
						},
						"in": "body",
						"required": true
					},
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "related",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each resource."
					},
					{
						"name": "ids",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "integer",
							"format": "int32"
						},
						"in": "query",
						"description": "Comma-delimited list of the identifiers of the records to retrieve."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "continue",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "rollback",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "filter",
						"type": "string",
						"in": "query",
						"description": "SQL-like filter to limit the records to retrieve."
					}
				],
				"responses": {
					"200": {
						"description": "Records",
						"schema": {
							"$ref": "#/definitions/RecordsResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"patch": {
				"tags": [
					"db"
				],
				"summary": "updateDbRecords() - Update (patch) one or more records.",
				"operationId": "updateDbRecords",
				"description": "Post data should be an array of records containing at least the identifying fields for each record.<br/> Posted body should be a single record with name-value pairs to update wrapped in a <b>record</b> tag.<br/> Ids can be included via URL parameter or included in the posted body.<br/> Filter can be included via URL parameter or included in the posted body.<br/> By default, only the id property of the record is returned on success. Use <b>fields</b> parameter to return more info.",
				"consumes": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"produces": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"parameters": [
					{
						"name": "body",
						"description": "A single record containing name-value pairs of fields to update.",
						"schema": {
							"$ref": "#/definitions/RecordsRequest"
						},
						"in": "body",
						"required": true
					},
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "related",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each resource."
					},
					{
						"name": "ids",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "integer",
							"format": "int32"
						},
						"in": "query",
						"description": "Comma-delimited list of the identifiers of the records to retrieve."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "continue",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "rollback",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "filter",
						"type": "string",
						"in": "query",
						"description": "SQL-like filter to limit the records to retrieve."
					}
				],
				"responses": {
					"200": {
						"description": "Records",
						"schema": {
							"$ref": "#/definitions/RecordsResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"db"
				],
				"summary": "deleteDbRecords() - Delete one or more records.",
				"operationId": "deleteDbRecords",
				"description": "Set the <b>ids</b> parameter to a list of record identifying (primary key) values to delete specific records.<br/> Alternatively, to delete records by a large list of ids, pass the ids in the <b>body</b>.<br/> By default, only the id property of the record is returned on success, use <b>fields</b> to return more info. Set the <b>filter</b> parameter to a SQL WHERE clause to delete specific records, otherwise set <b>force</b> to true to clear the table.<br/> Alternatively, to delete by a complicated filter or to use parameter replacement, pass the filter with or without params as the <b>body</b>.<br/> By default, only the id property of the record is returned on success, use <b>fields</b> to return more info. Set the <b>body</b> to an array of records, minimally including the identifying fields, to delete specific records.<br/> By default, only the id property of the record is returned on success, use <b>fields</b> to return more info. ",
				"consumes": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"produces": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"parameters": [
					{
						"name": "body",
						"description": "Data containing ids of records to delete.",
						"schema": {
							"$ref": "#/definitions/RecordsRequest"
						},
						"in": "body"
					},
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "related",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each resource."
					},
					{
						"name": "ids",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "integer",
							"format": "int32"
						},
						"in": "query",
						"description": "Comma-delimited list of the identifiers of the records to retrieve."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "continue",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, continue processing even after one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "rollback",
						"type": "boolean",
						"in": "query",
						"description": "In batch scenarios where supported, rollback all actions if one action fails. Default behavior is to halt and return results up to the first point of failure."
					},
					{
						"name": "filter",
						"type": "string",
						"in": "query",
						"description": "SQL-like filter to limit the records to retrieve."
					},
					{
						"name": "force",
						"type": "boolean",
						"in": "query",
						"description": "Set to true to delete all resources in the given table, folder, etc."
					}
				],
				"responses": {
					"200": {
						"description": "Records",
						"schema": {
							"$ref": "#/definitions/RecordsResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		},
		"/db/_table/{table_name}/{id}": {
			"parameters": [
				{
					"name": "id",
					"description": "Identifier of the record to retrieve.",
					"type": "string",
					"in": "path",
					"required": true
				},
				{
					"name": "table_name",
					"description": "Name of the table to perform operations on.",
					"type": "string",
					"in": "path",
					"required": true
				}
			],
			"get": {
				"tags": [
					"db"
				],
				"summary": "getDbRecord() - Retrieve one record by identifier.",
				"operationId": "getDbRecord",
				"description": "Use the <b>fields</b> parameter to limit properties that are returned. By default, all fields are returned.",
				"consumes": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"produces": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"parameters": [
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "related",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each resource."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					}
				],
				"responses": {
					"200": {
						"description": "Record",
						"schema": {
							"$ref": "#/definitions/RecordResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"put": {
				"tags": [
					"db"
				],
				"summary": "replaceDbRecord() - Replace the content of one record by identifier.",
				"operationId": "replaceDbRecord",
				"description": "Post data should be an array of fields for a single record.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
				"consumes": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"produces": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"parameters": [
					{
						"name": "body",
						"description": "Data containing name-value pairs of the replacement record.",
						"schema": {
							"$ref": "#/definitions/RecordRequest"
						},
						"in": "body",
						"required": true
					},
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "related",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each resource."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					}
				],
				"responses": {
					"200": {
						"description": "Record",
						"schema": {
							"$ref": "#/definitions/RecordResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"patch": {
				"tags": [
					"db"
				],
				"summary": "updateDbRecord() - Update (patch) one record by identifier.",
				"operationId": "updateDbRecord",
				"description": "Post data should be an array of fields for a single record.<br/> Use the <b>fields</b> parameter to return more properties. By default, the id is returned.",
				"consumes": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"produces": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"parameters": [
					{
						"name": "body",
						"description": "Data containing name-value pairs of the fields to update.",
						"schema": {
							"$ref": "#/definitions/RecordRequest"
						},
						"in": "body",
						"required": true
					},
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "related",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each resource."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					}
				],
				"responses": {
					"200": {
						"description": "Record",
						"schema": {
							"$ref": "#/definitions/RecordResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"db"
				],
				"summary": "deleteDbRecord() - Delete one record by identifier.",
				"operationId": "deleteDbRecord",
				"description": "Use the <b>fields</b> parameter to return more deleted properties. By default, the id is returned.",
				"consumes": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"produces": [
					"application/json",
					"application/xml",
					"text/csv"
				],
				"parameters": [
					{
						"name": "fields",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of properties to be returned for each resource, \"*\" returns all properties. If as_list, use this to override the default identifier."
					},
					{
						"name": "related",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of related names to retrieve for each resource."
					},
					{
						"name": "id_field",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the fields used as identifiers, used to override defaults or provide identifiers when none are provisioned."
					},
					{
						"name": "id_type",
						"type": "array",
						"collectionFormat": "csv",
						"items": {
							"type": "string"
						},
						"in": "query",
						"description": "Comma-delimited list of the field types used as identifiers for the table, used to override defaults or provide identifiers when none are provisioned."
					}
				],
				"responses": {
					"200": {
						"description": "Record",
						"schema": {
							"$ref": "#/definitions/RecordResponse"
						}
					},
					"default": {
						"description": "Error",
						"schema": {
							"$ref": "#/definitions/Error"
						}
					}
				}
			}
		}
	},
	"definitions": {
		"SqliteDbResponse": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Identifier of the resource."
				}
			}
		},
		"SqliteDbsResponse": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "Array of resources available to this service.",
					"items": {
						"$ref": "#/definitions/SqliteDbResponse"
					}
				}
			}
		},
		"SchemasList": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "Array of accessible resources available to this path.",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"SchemaResponse": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Identifier of the resource."
				}
			}
		},
		"SchemasResponse": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "Array of resources available to this path.",
					"items": {
						"$ref": "#/definitions/SchemaResponse"
					}
				}
			}
		},
		"Tables": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "Array of tables and their properties.",
					"items": {
						"$ref": "#/definitions/Table"
					}
				}
			}
		},
		"Table": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Name of the table."
				}
			}
		},
		"TableSchemas": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "An array of table definitions.",
					"items": {
						"$ref": "#/definitions/TableSchema"
					}
				}
			}
		},
		"TableSchema": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Identifier/Name for the table."
				},
				"label": {
					"type": "string",
					"description": "Displayable singular name for the table."
				},
				"plural": {
					"type": "string",
					"description": "Displayable plural name for the table."
				},
				"primary_key": {
					"type": "string",
					"description": "Field(s), if any, that represent the primary key of each record."
				},
				"name_field": {
					"type": "string",
					"description": "Field(s), if any, that represent the name of each record."
				},
				"field": {
					"type": "array",
					"description": "An array of available fields in each record.",
					"items": {
						"$ref": "#/definitions/FieldSchema"
					}
				},
				"related": {
					"type": "array",
					"description": "An array of available relationships to other tables.",
					"items": {
						"$ref": "#/definitions/RelationshipSchema"
					}
				}
			}
		},
		"FieldSchemas": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "An array of field definitions.",
					"items": {
						"$ref": "#/definitions/FieldSchema"
					}
				}
			}
		},
		"FieldSchema": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "The API name of the field."
				},
				"label": {
					"type": "string",
					"description": "The displayable label for the field."
				},
				"type": {
					"type": "string",
					"description": "The DSP abstract data type for this field."
				},
				"db_type": {
					"type": "string",
					"description": "The native database type used for this field."
				},
				"length": {
					"type": "integer",
					"format": "int32",
					"description": "The maximum length allowed (in characters for string, displayed for numbers)."
				},
				"precision": {
					"type": "integer",
					"format": "int32",
					"description": "Total number of places for numbers."
				},
				"scale": {
					"type": "integer",
					"format": "int32",
					"description": "Number of decimal places allowed for numbers."
				},
				"default_value": {
					"type": "string",
					"description": "Default value for this field."
				},
				"required": {
					"type": "boolean",
					"description": "Is a value required for record creation."
				},
				"allow_null": {
					"type": "boolean",
					"description": "Is null allowed as a value."
				},
				"fixed_length": {
					"type": "boolean",
					"description": "Is the length fixed (not variable)."
				},
				"supports_multibyte": {
					"type": "boolean",
					"description": "Does the data type support multibyte characters."
				},
				"auto_increment": {
					"type": "boolean",
					"description": "Does the integer field value increment upon new record creation."
				},
				"is_primary_key": {
					"type": "boolean",
					"description": "Is this field used as/part of the primary key."
				},
				"is_foreign_key": {
					"type": "boolean",
					"description": "Is this field used as a foreign key."
				},
				"ref_table": {
					"type": "string",
					"description": "For foreign keys, the referenced table name."
				},
				"ref_field": {
					"type": "string",
					"description": "For foreign keys, the referenced table field name."
				},
				"validation": {
					"type": "array",
					"description": "validations to be performed on this field.",
					"items": {
						"type": "string"
					}
				},
				"value": {
					"type": "array",
					"description": "Selectable string values for client menus and picklist validation.",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"RelationshipSchemas": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "An array of relationship definitions.",
					"items": {
						"$ref": "#/definitions/RelationshipSchema"
					}
				}
			}
		},
		"RelationshipSchema": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Name of the relationship."
				},
				"alias": {
					"type": "string",
					"description": "Alias to use in the API to override the name the relationship."
				},
				"label": {
					"type": "string",
					"description": "Label for the relationship."
				},
				"description": {
					"type": "string",
					"description": "Description of the relationship."
				},
				"type": {
					"type": "string",
					"description": "Relationship type - belongs_to, has_many, many_many."
				},
				"field": {
					"type": "string",
					"description": "The current table field that is used in the relationship."
				},
				"ref_table": {
					"type": "string",
					"description": "The table name that is referenced by the relationship."
				},
				"ref_field": {
					"type": "string",
					"description": "The field name that is referenced by the relationship."
				},
				"junction_table": {
					"type": "string",
					"description": "The intermediate junction table used for many_many relationships."
				},
				"junction_field": {
					"type": "string",
					"description": "The intermediate junction table field used for many_many relationships."
				},
				"junction_ref_field": {
					"type": "string",
					"description": "The intermediate joining table referencing field used for many_many relationships."
				},
				"always_fetch": {
					"type": "boolean",
					"description": "Always fetch this relationship when querying the parent table."
				}
			}
		},
		"TablesList": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "Array of accessible resources available to this path.",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"TableResponse": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Identifier of the resource."
				}
			}
		},
		"TablesResponse": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "Array of resources available to this path.",
					"items": {
						"$ref": "#/definitions/TableResponse"
					}
				}
			}
		},
		"RecordRequest": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"description": "Sample identifier of this record."
				}
			}
		},
		"RecordsRequest": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "Array of records.",
					"items": {
						"$ref": "#/definitions/RecordRequest"
					}
				},
				"ids": {
					"type": "array",
					"description": "Array of record identifiers.",
					"items": {
						"type": "integer",
						"format": "int32"
					}
				},
				"filter": {
					"type": "string",
					"description": "SQL or native filter to determine records where modifications will be applied."
				},
				"params": {
					"type": "array",
					"description": "Array of name-value pairs, used for parameter replacement on filters.",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"RecordResponse": {
			"type": "object",
			"properties": {
				"id": {
					"type": "integer",
					"format": "int32",
					"description": "Sample identifier of this record."
				}
			}
		},
		"RecordsResponse": {
			"type": "object",
			"properties": {
				"resource": {
					"type": "array",
					"description": "Array of system user records.",
					"items": {
						"$ref": "#/definitions/RecordResponse"
					}
				},
				"meta": {
					"$ref": "#/definitions/Metadata"
				}
			}
		},
		"Metadata": {
			"type": "object",
			"properties": {
				"schema": {
					"type": "array",
					"description": "Array of table schema.",
					"items": {
						"type": "string"
					}
				},
				"count": {
					"type": "integer",
					"format": "int32",
					"description": "Record count returned for GET requests."
				}
			}
		}
	}
}
